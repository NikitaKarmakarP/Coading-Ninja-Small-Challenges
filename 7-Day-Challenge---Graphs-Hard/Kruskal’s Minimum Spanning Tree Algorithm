#ifndef SOLUTION_H
#define SOLUTION_H

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Structure to represent an edge
struct Edge {
    int u, v, weight;
    bool operator<(const Edge& other) const {
        return weight < other.weight;
    }
};

// Union-Find (Disjoint-Set) data structure
class UnionFind {
private:
    vector<int> parent, rank;

public:
    UnionFind(int n) {
        parent.resize(n + 1);
        rank.resize(n + 1, 0);
        for (int i = 1; i <= n; ++i) {
            parent[i] = i;
        }
    }

    int find(int u) {
        if (u != parent[u]) {
            parent[u] = find(parent[u]);
        }
        return parent[u];
    }

    void unionSets(int u, int v) {
        int rootU = find(u);
        int rootV = find(v);

        if (rootU != rootV) {
            if (rank[rootU] < rank[rootV]) {
                parent[rootU] = rootV;
            } else if (rank[rootU] > rank[rootV]) {
                parent[rootV] = rootU;
            } else {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
        }
    }
};

// Function to find the weight of the Minimum Spanning Tree
int kruskalMST(int n, vector<vector<int>>& edges) {
    vector<Edge> edgeList;
    for (const auto& edge : edges) {
        edgeList.push_back({edge[0], edge[1], edge[2]});
    }

    sort(edgeList.begin(), edgeList.end());
    UnionFind uf(n);
    int mstWeight = 0;
    int edgeCount = 0;

    for (const auto& edge : edgeList) {
        if (uf.find(edge.u) != uf.find(edge.v)) {
            uf.unionSets(edge.u, edge.v);
            mstWeight += edge.weight;
            edgeCount++;
            if (edgeCount == n - 1) break;
        }
    }

    return mstWeight;
}

#endif // SOLUTION_H
